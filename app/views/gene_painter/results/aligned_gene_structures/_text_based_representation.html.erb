<%
  std_path = controller.build_output_path("std.txt")
  intron_phase_path = controller.build_output_path("intron-phase.txt") 
  fuzzy_path = controller.build_output_path("fuzzy.txt")

  Helper.file_exist_or_die(std_path)
  Helper.file_exist_or_die(intron_phase_path)
  is_fuzzy_file =  Helper.does_file_exist( fuzzy_path )

  # standard exon-intron pattern
  std_data = parse_exonintronpattern(std_path)
  std_merged_tr = data_to_merged_tr(std_data)
  std_tr = data_to_tr(std_data)

  # intron-phase exon-intron pattern
  intron_data = parse_exonintronpattern(intron_phase_path)
  intron_tr = data_to_tr(intron_data)
  intron_merged_tr = data_to_merged_tr(intron_data)

  # fuzzy-positions merged exon-intron pattern
  if is_fuzzy_file then 
    fuzzy_data, fuzzy_pos = parse_fuzzypattern(fuzzy_path)

    fuzzy_tr = fuzzy_data_to_tr(fuzzy_data, fuzzy_pos)
    fuzzy_merged_tr = data_to_merged_tr(fuzzy_data)

    fuzzy_pos = add_class_info_to_fuzzy_pos(fuzzy_pos)
  else
    fuzzy_pos = init_fuzzypos
    fuzzy_tr = ""
    fuzzy_merged_tr = "<tr></tr><tr></tr>"
  end

  n_rows = std_data.size

# TODO
# helper aufrauemen


# stats-methods
# file exist - check also in all other results-tabs
# use functions parse_X, data_to_tr in all other results-tabs
# use different names for intron-classes

%>

<div data-fuzzy='<%= fuzzy_pos.to_json %>' class="pattern">
  <table id="std" class="fixTable unstyled">
    <tbody>
      <%= std_tr.html_safe %>
    </tbody>
    <tfoot>
      <%= std_merged_tr.html_safe %>
    </tfoot>
  </table>
  <table id="intron-phase" class="fixTable unstyled">
    <tbody>
      <%= intron_tr.html_safe %>
    </tbody>
    <tfoot>
      <%= intron_merged_tr.html_safe %>
    </tfoot>
  </table>   
  <table id="std-fuzzy" class="fixTable unstyled">
    <tbody>
      <%= fuzzy_tr.html_safe %>
    </tbody>
    <tfoot>
      <%= fuzzy_merged_tr.html_safe %>
    </tfoot>
  </table>   
</div>

<h4>Legend</h4>
<table id='colorbar' class="unstyled">
  <tr>
    <td>0</td>
    <td class="0pct">&nbsp;</td><td class="5pct">&nbsp;</td><td class="10pct">&nbsp;</td><td class="15pct">&nbsp;</td>
    <td class="20pct">&nbsp;</td><td class="25pct">&nbsp;</td><td class="30pct">&nbsp;</td><td class="35pct">&nbsp;</td>
    <td class="40pct">&nbsp;</td><td class="45pct">&nbsp;</td><td class="50pct">&nbsp;</td><td class="55pct">&nbsp;</td>
    <td class="60pct">&nbsp;</td><td class="65pct">&nbsp;</td><td class="70pct">&nbsp;</td><td class="75pct">&nbsp;</td>
    <td class="80pct">&nbsp;</td><td class="85pct">&nbsp;</td><td class="90pct">&nbsp;</td><td class="95pct">&nbsp;</td>
    <td class="100pct">&nbsp;</td>
    <td style="padding-right:115px;">100&#37; intron conservation</td>
    <td style="padding-left: 15px; font-family: Courier; width:40px" class="vertical_line" id="legend-intron-placeholder">|</td>
    <td style="padding-left: 5px;">Intron</td>
  </tr>
  <tr>
    <td colspan="23"></td>
    <td style="padding-left: 15px; font-family: Courier;" class="vertical_line">-</td>
    <td style="padding-left: 5px;">Coding sequence</td>
  </tr>
</table>

<h4>View Options</h4>
<table class="unstyled">
  <tr>
    <td style='padding-right: 15px;'>
      <%=
        content_tag(:div,
          check_box_tag('highlight_unique', "1", nil, :class => "checkbox-textbased-highlight") +
          label_tag('highlight_unique', 'Highlight unique introns', :style => 'padding-left: 5px; padding-right: 20px')
          )
      %>

      <%=
        content_tag(:div,
          check_box_tag('highlight_common', "1", nil, :class => "checkbox-textbased-highlight") +
          label_tag('highlight_common', 'Highlight introns common to at least ', :style => 'padding-left: 5px;') +
          '<input id="spinner" name="value" style="width: 25px;">'.html_safe + ' % of all genes.'.html_safe
          )
      %>
      <%=
        content_tag(:div,
          check_box_tag('highlight_fuzzy', "1", nil, :class => "checkbox-textbased-highlight") +
          label_tag('highlight_fuzzy', 'Highlight fuzzy introns', :style => 'padding-left: 5px; padding-right: 20px')
          )
      %>

      <%= javascript_tag defer: 'defer' do -%>
        var spinner = $("input#spinner");
        $(function() {
          spinner.spinner({
            min: 1,
            max: 100
          });

          // Set spinner default value
          spinner.spinner( 'value', 70 );
        });

        spinner.on('spinstop spinchange', function() {
          resetTable();
          if ( isNaN( parseInt(this.value) ) ) {
            $('input#highlight_common').prop('disabled', true);
          } else if ( parseInt(this.value) > 100 || parseInt(this.value) < 1 ) {
            $('input#highlight_common').prop('disabled', true);
          } else {
            $('input#highlight_common').prop('disabled', false);
            $('input#highlight_common').prop('checked', false).trigger('click');
          }
        });

      <% end -%>
    </td>
    <td style='padding-left: 15px;' class="vertical_line">
      <%=
        content_tag(:div,
          check_box_tag('show_intron_phase') +
          label_tag('show_intron_phase', 'Show intron phase', :style => 'padding-left: 5px; padding-right: 20px')
          ) +
        content_tag(:div,
          check_box_tag('show_fuzzy_introns') +
          label_tag('show_fuzzy_introns', 'Show fuzzy introns merged', :style => 'padding-left: 5px; padding-right: 20px')
          )
      %>
    </td>
  <tr>
</table>

<%= 
  # render always, to ensure functionality of (fuzzy-) checkboxes
  render :partial => "gene_painter/help/no_fuzzy_positions_info"
%>
<%=
  # fuzzy file was not created:
  if ! is_fuzzy_file then 
    # show additional info-box; no checkbox triggers hiding this message
    render :partial => "gene_painter/help/no_fuzzy_search_info"
  end
%>

<script>

  // fix footer and first column
  $(document).ready(function() {
    $("#std.fixTable").tableHeadFixer({'foot': true, 'head': false, 'left': 1}); 
    $("#intron-phase.fixTable").tableHeadFixer({'foot': true, 'head': false, 'left': 1}); 
    $("#std-fuzzy.fixTable").tableHeadFixer({'foot': true, 'head': false, 'left': 1}); 
  });

  // pattern table hover
  $(".fixTable tr").hover(
    function () {
      $(this).addClass("pattern-hover");
    }, 
    function () {
      $(this).removeClass("pattern-hover");
    }
  );
  // pattern table highlight
  $(".fixTable tr").click(function() {
    $(this).toggleClass("pattern-highlight");
    $(this).toggleClass("pattern-hover");
  });


  // init vars
  // tables
  var $std_table, $intron_phase_table, $std_fuzzy_table;
  var $std_merged_tr, $intron_phase_merged_tr, $std_fuzzy_merged_tr;

  $std_table = $('table#std');
  $intron_phase_table = $('table#intron-phase');
  $std_fuzzy_table = $('table#std-fuzzy');
  $std_merged_tr = $std_table.find('tfoot tr');
  $intron_phase_merged_tr = $intron_phase_table.find('tfoot tr');
  $std_fuzzy_merged_tr = $std_fuzzy_table.find('tfoot tr');

  // Visible Spectrum
  var start = 450, // nm blue
    end = 780,   // nm red
    total = end - start;
  var wavelength, color;

  // default settings:
  $std_fuzzy_table.hide();
  $intron_phase_table.hide();
  $intron_phase_merged_tr.hide();
  $std_fuzzy_merged_tr.hide();

  // number of rows
  var n_rows = <%= n_rows %>;

  // color introns by occurence
  function spinnerEventHandler(percent) {
    var min_occurence;
    
    var active_merged_tr;
    if ( $std_merged_tr.is(":visible") ) {
      active_merged_tr = $std_merged_tr;
    } else if ( $intron_phase_merged_tr.is(":visible") ) {
      active_merged_tr = $intron_phase_merged_tr;
    } else {
      active_merged_tr = $std_fuzzy_merged_tr;
    }

    percent = parseInt(percent) / 100;
    min_occurence = Math.ceil(percent * n_rows );

    if (min_occurence > 0) {
      for (var i = min_occurence; i <= n_rows; i++) {
        class_name = "col-" + i;
        background_color = active_merged_tr.find("." + i).css("background-color");

        $("." + class_name).addClass("common-highlighted");
        $("." + class_name).css("background-color", background_color);
      }
    }
  }

  // color merged table
  function colorMergedTable(row) {
    // cell[0] contains genename; start with cell 1 instead.
    for (var i = 1, cell; cell = row.cells[i]; i++) {
      var nIntrons = cell.className;
      if (nIntrons == 0) {
        $(cell).css({'background-color': '#F5F5F5'});
      } else {
        wavelength = (nIntrons * total) / n_rows + start;
        color = Math.nmToRGB(wavelength);
        $(cell).css({'background-color': 'rgb(' +  color.red + ', ' + color.green + ', ' + color.blue + ')'});
      }
    }
  }
  colorMergedTable($std_merged_tr[1]);
  colorMergedTable($intron_phase_merged_tr[1]);
  colorMergedTable($std_fuzzy_merged_tr[1]);

  // color bar (merged legend)
  for (var i =0; i <= 100; i+=5) {
    wavelength = i/100 * total + start;
    color = Math.nmToRGB(wavelength);
    $("."+i+"pct")[0].setAttribute('style', 'background-color: rgb(' +  color.red + ', ' + color.green + ', ' + color.blue + ')');
  }

  // bind event to check boxes
  $('input#highlight_unique').change(function() {
    var checked = $(this).is(':checked');
    resetTable(); // reset table in any case (checked or unchecked)
    if (checked) {
      $('td.col-1').addClass('highlighted');
      $('input#highlight_common').prop('checked', false);
      $('input#highlight_fuzzy').prop('checked', false);
      $("#no_fuzzy_info").hide();

      // link to phylotree and graphic
      resetPhyloTree();
      resetGraphic();
    }
  });

  $('input#highlight_common').change(function() {
    var checked = $(this).is(':checked');
    resetTable(); // reset table in any case (checked or unchecked)
    if (checked) {
      spinnerEventHandler(spinner.spinner("value")); 
      $('input#highlight_unique').prop('checked', false);
      $('input#highlight_fuzzy').prop('checked', false);
      $("#no_fuzzy_info").hide();

      // link to phylotree and graphic
      resetPhyloTree();
      resetGraphic();
    }
  });

  $('input#highlight_fuzzy').change(function() {
    var checked = $(this).is(':checked');
    resetTable(); // reset table in any case (checked or unchecked)
    // hide info-box (show only if no fuzzy introns)
    $("#no_fuzzy_info").hide();

    if (checked) {

      var i = 0;
      var useClass;
      $.each($("#pattern-div").data('fuzzy'), function(key, val) {
        // alternate color
        if (i % 2 == 0) {
          useClass = "highlighted";
        } else {
          useClass = "highlighted-2";
        }    
        i++;

        // highlight table columns
        $("."+key).addClass(useClass);
        $.each(val, function(i, this_val){
          $("."+this_val).addClass(useClass);
        });
      });

      $('input#highlight_unique').prop('checked', false);
      $('input#highlight_common').prop('checked', false);

      // link to phylotree and graphic
      resetPhyloTree();
      resetGraphic();

      // show info-box if no fuzzy pos
      if ($.isEmptyObject($("#pattern-div").data('fuzzy'))) {
        $("#no_fuzzy_info").show();
      }
    }
  });

  // show intron phase
  $("input#show_intron_phase").change(function() {  
    // in any case: hide fuzzy tables
    $std_fuzzy_table.hide();
    $std_fuzzy_merged_tr.hide();

    if ( $(this).is(':checked') ) {
      // show intronphase-table
      $intron_phase_table.show();
      $intron_phase_merged_tr.show();
      $std_table.hide();
      $std_merged_tr.hide();

      // link to fuzzy-checkbox
      $('input#show_fuzzy_introns').prop('checked', false);
      $("#no_fuzzy_info").hide();

      // link to common introns
      if ( $('input#highlight_common').is(':checked') ) {
        spinnerEventHandler(spinner.spinner("value")); 
      }

      $("#legend-intron-placeholder").html("0,1,2");

    } else {
      // show std-table
      $intron_phase_table.hide();
      $intron_phase_merged_tr.hide();
      $std_table.show();
      $std_merged_tr.show();

      $("#legend-intron-placeholder").html("|");
    }
  });

  // show fuzzy introns merged into one position
  $('input#show_fuzzy_introns').change(function() {
    // in any case: hide intron-phase table
    $intron_phase_table.hide();
    $intron_phase_merged_tr.hide();

    // in any case: hide info-box (show only if no fuzzy introns)
    $("#no_fuzzy_info").hide();

    if ( $(this).is(':checked') ) {
      // show fuzzy-tables
      $std_fuzzy_table.show();
      $std_fuzzy_merged_tr.show();

      $std_merged_tr.hide();
      $std_table.hide();

      // link to common introns
      if ( $('input#highlight_common').is(':checked') ) {
        spinnerEventHandler(spinner.spinner("value")); 
      }

      // link to intron_phase checkbox
      $('input#show_intron_phase').prop('checked', false);

      // show info-box if no fuzzy pos
      if ($.isEmptyObject($("#pattern-div").data('fuzzy'))) {
        $("#no_fuzzy_info").show();
      }      

    } else {
      // show std-tables
      $std_fuzzy_table.hide();
      $std_fuzzy_merged_tr.hide();

      $std_merged_tr.show();
      $std_table.show();
    }
  });

  // fuzzy-introns file was not created at all
  var is_fuzzy_file = <%= is_fuzzy_file %>;
  if (! is_fuzzy_file) {
    // fuzzy file was not created: disable fuzzy-checkboxes
    $('input#highlight_fuzzy').prop('disabled', true);
    $('input#show_fuzzy_introns').prop('disabled', true);
  }

</script>
