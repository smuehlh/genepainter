<%
  std_path = controller.build_output_path("std.txt")
  intron_phase_path = controller.build_output_path("intron-phase.txt") 
  fuzzy_path = controller.build_output_path("fuzzy.txt")

  # "normal" tables
  std_table, names_table, merged_table = get_table(
    std_path, 
    {
      is_merged_table: true, 
      id_merged_table: 'merged',
      id_pattern_table: 'non_intron_phase'
    }
  )
  intronphase_table, dummy = get_table(intron_phase_path, {id_pattern_table: 'intron_phase'})

  # fuzzy tables and positions
  is_fuzzy_file =  Helper.does_file_exist( fuzzy_path )
  if is_fuzzy_file then 
    std_fuzzy_table, merged_fuzzy_table, fuzzy_pos = get_fuzzy_table_and_info(fuzzy_path, 'non_intron_phase_fuzzy', 'merged_fuzzy')

  else
    # hot-fix: no file with fuzzy-pattern means that no fuzzy-pos exist ...
    fuzzy_pos = {}
  end
  if fuzzy_pos.empty? then 
    # if there are no fuzzy positions, init 'fuzzy' tables with standard-tables 
    # use correct table ID's

    # important: check if fuzzy positions exist when handling onclick-events to show fuzzy positions!
    std_fuzzy_table, dummy, merged_fuzzy_table = get_table(
      std_path, 
      {
        is_merged_table: true, 
        id_merged_table: 'merged_fuzzy',
        id_pattern_table: 'non_intron_phase_fuzzy'
      }
    )
  end
%>

<div id='text-based' class="pattern">
  <div id='left-column' class="res_left_col">
    <div id='all-left' class="res_height res_names">
      <%= names_table.html_safe %>
    </div>
    <div id='merged_tab'>
      <table>
        <tr>
          <td>&gt;Merged</td>
        </tr>
      </table>
    </div>
  </div>

  <div id='right-column'>
    <%=
      content_tag(:div,
        std_table +
        intronphase_table +
        std_fuzzy_table,
        :id => "all-right",
        :class => "res_height res_names",
        :style => "padding-left: 10px",
        :data => {fuzzy: fuzzy_pos}
      )
    %>
    <div id='merged-container' style='overflow: hidden; padding-left: 10px'>
      <%= 
        merged_table +
        merged_fuzzy_table
      %>
    </div>
  </div>

  <%= javascript_tag defer: 'defer' do -%>

    // simultaneously scroll up/down, left/right
    $('div#all-right').on('scroll', function() {
      $('div#all-left').scrollTop($(this).scrollTop());
      $('div#merged-container').scrollLeft($(this).scrollLeft());
    });

    $('div#all-left').on('scroll', function() {
      $('div#all-right').scrollTop($(this).scrollTop());
    });

   <% end -%>
</div>

<h4>Legend</h4>
<table id='colorbar' class="unstyled">
  <tr>
    <td>0</td>
    <td class="0pct">&nbsp;</td><td class="5pct">&nbsp;</td><td class="10pct">&nbsp;</td><td class="15pct">&nbsp;</td>
    <td class="20pct">&nbsp;</td><td class="25pct">&nbsp;</td><td class="30pct">&nbsp;</td><td class="35pct">&nbsp;</td>
    <td class="40pct">&nbsp;</td><td class="45pct">&nbsp;</td><td class="50pct">&nbsp;</td><td class="55pct">&nbsp;</td>
    <td class="60pct">&nbsp;</td><td class="65pct">&nbsp;</td><td class="70pct">&nbsp;</td><td class="75pct">&nbsp;</td>
    <td class="80pct">&nbsp;</td><td class="85pct">&nbsp;</td><td class="90pct">&nbsp;</td><td class="95pct">&nbsp;</td>
    <td class="100pct">&nbsp;</td>
    <td style="padding-right:115px;">100&#37; intron conservation</td>
    <td style="padding-left: 15px; font-family: Courier; width:40px" class="vertical_line" id="legend-intron-placeholder">|</td>
    <td style="padding-left: 5px;">Intron</td>
  </tr>
  <tr>
    <td colspan="23"></td>
    <td style="padding-left: 15px; font-family: Courier;" class="vertical_line">-</td>
    <td style="padding-left: 5px;">Coding sequence</td>
  </tr>
</table>

<h4>View Options</h4>
<table class="unstyled">
  <tr>
    <td style='padding-right: 15px;'>
      <%=
        content_tag(:div,
          check_box_tag('highlight_unique', "1", nil, :class => "checkbox-textbased-highlight") +
          label_tag('highlight_unique', 'Highlight unique introns', :style => 'padding-left: 5px; padding-right: 20px')
          )
      %>

      <%=
        content_tag(:div,
          check_box_tag('highlight_common', "1", nil, :class => "checkbox-textbased-highlight") +
          label_tag('highlight_common', 'Highlight introns common to at least ', :style => 'padding-left: 5px;') +
          '<input id="spinner" name="value" style="width: 25px;">'.html_safe + ' % of all genes.'.html_safe
          )
      %>
      <%=
        content_tag(:div,
          check_box_tag('highlight_fuzzy', "1", nil, :class => "checkbox-textbased-highlight") +
          label_tag('highlight_fuzzy', 'Highlight fuzzy introns', :style => 'padding-left: 5px; padding-right: 20px')
          )
      %>

      <%= javascript_tag defer: 'defer' do -%>
        var spinner = $("input#spinner");
        $(function() {
          spinner.spinner({
            min: 1,
            max: 100
          });

          // Set spinner default value
          spinner.spinner( 'value', 70 );
        });

        spinner.on('spinstop spinchange', function() {
          resetTable();
          if ( isNaN( parseInt(this.value) ) ) {
            $('input#highlight_common').prop('disabled', true);
          } else if ( parseInt(this.value) > 100 || parseInt(this.value) < 1 ) {
            $('input#highlight_common').prop('disabled', true);
          } else {
            $('input#highlight_common').prop('disabled', false);
            $('input#highlight_common').prop('checked', false).trigger('click');
          }
        });

      <% end -%>
    </td>
    <td style='padding-left: 15px;' class="vertical_line">
      <%=
        content_tag(:div,
          check_box_tag('show_intron_phase') +
          label_tag('show_intron_phase', 'Show intron phase', :style => 'padding-left: 5px; padding-right: 20px')
          ) +
        content_tag(:div,
          check_box_tag('show_fuzzy_introns') +
          label_tag('show_fuzzy_introns', 'Show fuzzy introns merged', :style => 'padding-left: 5px; padding-right: 20px')
          )
      %>
    </td>
  <tr>
</table>

<%= 
  # render always, to ensure functionality of (fuzzy-) checkboxes
  render :partial => "gene_painter/help/no_fuzzy_positions_info"
%>
<%=
  # fuzzy file was not created:
  if ! is_fuzzy_file then 
    # show additional info-box; no checkbox triggers hiding this message
    render :partial => "gene_painter/help/no_fuzzy_search_info"
  end
%>

<script>

  // init vars
  // tables
  var $non_intron_phase_table, $intron_phase_table, $non_intron_phase_fuzzy_table;
  var $merged_table, $merged_fuzzy_table;

  $non_intron_phase_table = $('table#non_intron_phase');
  $intron_phase_table = $('table#intron_phase');
  $non_intron_phase_fuzzy_table = $('table#non_intron_phase_fuzzy');
  $merged_table = $('table#merged');
  $merged_fuzzy_table = $('table#merged_fuzzy');

  // Visible Spectrum
  var start = 450, // nm blue
    end = 780,   // nm red
    total = end - start;
  var wavelength, color;


  // default settings:
  $non_intron_phase_fuzzy_table.toggle();
  $intron_phase_table.toggle();
  $merged_fuzzy_table.toggle();

  // number of rows
  var n_rows = $non_intron_phase_table[0].rows.length;

  // color introns by occurence
  function spinnerEventHandler(percent) {
    var min_occurence;
    
    var active_merged_table;
    if ( $merged_table.is(":visible") ) {
      active_merged_table = $merged_table;
    } else {
      active_merged_table = $merged_fuzzy_table;
    }

    percent = parseInt(percent) / 100;
    min_occurence = Math.ceil(percent * n_rows );

    if (min_occurence > 0) {
      for (var i = min_occurence; i <= n_rows; i++) {
        class_name = "col-" + i;
        background_color = active_merged_table.find("." + i).css("background-color");

        $("." + class_name).addClass("common-highlighted");
        $("." + class_name).css("background-color", background_color);
      }
    }
  }

  // color merged table
  function colorMergedTable(tMerged) {
    var row = tMerged.rows[0];
    for (var i = 0, cell; cell = row.cells[i]; i++) {
      var nIntrons = cell.className;
      if (nIntrons == 0) {
        cell.setAttribute('style', 'background-color: #F5F5F5');
      } else {
        wavelength = (nIntrons * total) / n_rows + start;
        color = Math.nmToRGB(wavelength);
        cell.setAttribute('style', 'background-color: rgb(' +  color.red + ', ' + color.green + ', ' + color.blue + ')');
      }
    }

    // insert dummy cells to match scroll-bar of pattern-table
    cell = row.insertCell(-1);
    cell.innerHTML = "&nbsp;"; 

    cell = row.insertCell(-1);
    cell.innerHTML = "&nbsp;";
  }

  // bind event to check boxes
  $('input#highlight_unique').change(function() {
    var checked = $(this).is(':checked');
    resetTable(); // reset table in any case (checked or unchecked)
    if (checked) {
      $('td.col-1').addClass('highlighted');
      $('input#highlight_common').prop('checked', false);
      $('input#highlight_fuzzy').prop('checked', false);
      $("#no_fuzzy_info").hide();

      // link to phylotree and graphic
      resetPhyloTree();
      resetGraphic();
    }
  });

  $('input#highlight_common').change(function() {
    var checked = $(this).is(':checked');
    resetTable(); // reset table in any case (checked or unchecked)
    if (checked) {
      spinnerEventHandler(spinner.spinner("value")); 
      $('input#highlight_unique').prop('checked', false);
      $('input#highlight_fuzzy').prop('checked', false);
      $("#no_fuzzy_info").hide();

      // link to phylotree and graphic
      resetPhyloTree();
      resetGraphic();
    }
  });

  $('input#highlight_fuzzy').change(function() {
    var checked = $(this).is(':checked');
    resetTable(); // reset table in any case (checked or unchecked)
    // hide info-box (show only if no fuzzy introns)
    $("#no_fuzzy_info").hide();

    if (checked) {

      var i = 0;
      var useClass;
      $.each($("#all-right").data('fuzzy'), function(key, val) {
        // alternate color
        if (i % 2 == 0) {
          useClass = "highlighted";
        } else {
          useClass = "highlighted-2";
        }    
        i++;

        // highlight table columns
        $("."+key).addClass(useClass);
        $.each(val, function(i, this_val){
          $("."+this_val).addClass(useClass);
        });
      });

      $('input#highlight_unique').prop('checked', false);
      $('input#highlight_common').prop('checked', false);

      // link to phylotree and graphic
      resetPhyloTree();
      resetGraphic();

      // show info-box if no fuzzy pos
      if ($.isEmptyObject($("#all-right").data('fuzzy'))) {
        $("#no_fuzzy_info").show();
      }
    }
  });


  // show intron phase
  $("input#show_intron_phase").change(function() {  
    // in any case: hide fuzzy tables and show the unfuzzy-merged table
    $non_intron_phase_fuzzy_table.hide();
    $merged_fuzzy_table.hide();

    $merged_table.show();

    if ( $(this).is(':checked') ) {
      // show intronphase-table
      $intron_phase_table.show();
      $non_intron_phase_table.hide();

      // link to fuzzy-checkbox
      $('input#show_fuzzy_introns').prop('checked', false);
      $("#no_fuzzy_info").hide();

      // link to common introns
      if ( $('input#highlight_common').is(':checked') ) {
        spinnerEventHandler(spinner.spinner("value")); 
      }

      $("#legend-intron-placeholder").html("0,1,2");

    } else {
      // show std-table
      $intron_phase_table.hide();
      $non_intron_phase_table.show();

      $("#legend-intron-placeholder").html("|");
    }
  });

  // show fuzzy introns merged into one position
  $('input#show_fuzzy_introns').change(function() {
    // in any case: hide intron-phase table
    $intron_phase_table.hide();
    // in any case: hide info-box (show only if no fuzzy introns)
    $("#no_fuzzy_info").hide();

    if ( $(this).is(':checked') ) {
      // show fuzzy-tables
      $non_intron_phase_fuzzy_table.show();
      $merged_fuzzy_table.show();

      $merged_table.hide();
      $non_intron_phase_table.hide();

      // link to common introns
      if ( $('input#highlight_common').is(':checked') ) {
        spinnerEventHandler(spinner.spinner("value")); 
      }

      // link to intron_phase checkbox
      $('input#show_intron_phase').prop('checked', false);

      // show info-box if no fuzzy pos
      if ($.isEmptyObject($("#all-right").data('fuzzy'))) {
        $("#no_fuzzy_info").show();
      }      

    } else {
      // show std-tables
      $non_intron_phase_fuzzy_table.hide();
      $merged_fuzzy_table.hide();

      $merged_table.show();
      $non_intron_phase_table.show();
    }
  });

  // fuzzy-introns file was not created at all
  var is_fuzzy_file = <%= is_fuzzy_file %>
  if (! is_fuzzy_file) {
    // fuzzy file was not created: disable fuzzy-checkboxes
    $('input#highlight_fuzzy').prop('disabled', true);
    $('input#show_fuzzy_introns').prop('disabled', true);
  }

  // merged
  // color merged table(s)
  colorMergedTable($merged_table[0]);
  colorMergedTable($merged_fuzzy_table[0])

  // color bar (legend)
  for (var i =0; i <= 100; i+=5) {
    wavelength = i/100 * total + start;
    color = Math.nmToRGB(wavelength);
    $("."+i+"pct")[0].setAttribute('style', 'background-color: rgb(' +  color.red + ', ' + color.green + ', ' + color.blue + ')');
  }

</script>
