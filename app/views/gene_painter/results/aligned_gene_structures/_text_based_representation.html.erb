<%
  std_path = controller.build_output_path("std.txt")
  intron_phase_path = controller.build_output_path("intron-phase.txt") 

  std_table, names_table, merged_table = get_table(
    std_path, 
    {
      is_merged_table: true, 
      id_merged_table: 'merged',
      id_pattern_table: 'non_intron_phase'
    }
  )
  intronphase_table, dummy = get_table(intron_phase_path, {id_pattern_table: 'intron_phase'})
%>

<div id='text-based' class="pattern">
  <div id='left-column' class="res_left_col">
    <div id='all-left' class="res_height res_names">
      <%= names_table.html_safe %>
    </div>
    <div id='merged_tab'>
      <table>
        <tr>
          <td>&gt;Merged</td>
        </tr>
      </table>
    </div>
  </div>

  <div id='right-column'>
    <div id='all-right' class="res_height res_names" style='padding-left: 10px'>
      <%= std_table.html_safe %>
      <%= intronphase_table.html_safe %>
    </div>
    <div id='merged-container' style='overflow: hidden; padding-left: 10px'>
      <%= merged_table.html_safe%>
    </div>
  </div>

  <%= javascript_tag defer: 'defer' do -%>

    // simultaneously scroll up/down, left/right
    $('div#all-right').on('scroll', function() {
      $('div#all-left').scrollTop($(this).scrollTop());
      $('div#merged-container').scrollLeft($(this).scrollLeft());
    });

    $('div#all-left').on('scroll', function() {
      $('div#all-right').scrollTop($(this).scrollTop());
    });

   <% end -%>
</div>

<h4>Legend</h4>
<table id='colorbar'>
  <tr>
    <td>0</td>
    <td class="0pct">&nbsp;</td><td class="5pct">&nbsp;</td><td class="10pct">&nbsp;</td><td class="15pct">&nbsp;</td>
    <td class="20pct">&nbsp;</td><td class="25pct">&nbsp;</td><td class="30pct">&nbsp;</td><td class="35pct">&nbsp;</td>
    <td class="40pct">&nbsp;</td><td class="45pct">&nbsp;</td><td class="50pct">&nbsp;</td><td class="55pct">&nbsp;</td>
    <td class="60pct">&nbsp;</td><td class="65pct">&nbsp;</td><td class="70pct">&nbsp;</td><td class="75pct">&nbsp;</td>
    <td class="80pct">&nbsp;</td><td class="85pct">&nbsp;</td><td class="90pct">&nbsp;</td><td class="95pct">&nbsp;</td>
    <td class="100pct">&nbsp;</td>
    <td>100&#37; intron conservation</td>
  </tr>
</table>

<h4>View Options</h4>
<table>
  <tr>
    <td>
      <%=
        content_tag(:div,
          check_box_tag('highlight_unique', "1", nil, :class => "checkbox-textbased-highlight") +
          content_tag(:span, 'Highlight unique introns', :style => 'padding-left: 5px; padding-right: 20px')
          )
      %>

      <%=
        content_tag(:div,
          check_box_tag('highlight_common', "1", nil, :class => "checkbox-textbased-highlight") +
          content_tag(:span, 'Highlight introns common to at least ', :style => 'padding-left: 5px;') +
          '<input id="spinner" name="value" style="width: 25px;">'.html_safe + ' % of all genes.'.html_safe
          )
      %>

      <%= javascript_tag defer: 'defer' do -%>
        var spinner = $("input#spinner");
        $(function() {
          spinner.spinner({
            min: 1,
            max: 100
          });

          // Set spinner default value
          spinner.spinner( 'value', 70 );
        });

        spinner.on('spinstop spinchange', function() {
          resetTable();
          if ( isNaN( parseInt(this.value) ) ) {
            $('input#highlight_common').prop('disabled', true);
          } else if ( parseInt(this.value) > 100 || parseInt(this.value) < 1 ) {
            $('input#highlight_common').prop('disabled', true);
          } else {
            $('input#highlight_common').prop('disabled', false);
            $('input#highlight_common').prop('checked', false).trigger('click');
          }
        });

      <% end -%>
    </td>
    <td style='padding-left: 30px;'>
      <%=
        content_tag(:div,
          check_box_tag('show_intron_phase') +
          content_tag(:span, 'Show intron phase', :style => 'padding-left: 5px; padding-right: 20px')
          )
      %>
    </td>
  <tr>
</table>

<script>

  var $non_intron_phase_table = $('table#non_intron_phase'),
  $intron_phase_table = $('table#intron_phase');

  $intron_phase_table.toggle();

  // number of rows
  var n_rows_non_intron_phase = $non_intron_phase_table[0].rows.length;

  // color introns by occurence
  function spinnerEventHandler(percent) {
    var min_occurence;

    percent = parseInt(percent) / 100;
    min_occurence = Math.ceil(percent * n_rows_non_intron_phase );

    if (min_occurence > 0) {
      for (var i = min_occurence; i <= n_rows_non_intron_phase; i++) {
        class_name = "col-" + i;
        background_color = $("table#merged").find("." + i).css("background-color");

        $("." + class_name).addClass("common-highlighted");
        $("." + class_name).css("background-color", background_color);
      }
    }
  }

  // bind event to check boxes
  $('input#highlight_unique').change(function() {
    var checked = $(this).is(':checked');
    resetTable(); // reset table in any case (checked or unchecked)
    if (checked) {
      $('td.col-1').addClass('highlighted');
      $('input#highlight_common').prop('checked', false);

      // link to phylotree and graphic
      resetPhyloTree();
      resetGraphic();
    }
  });

  $('input#highlight_common').change(function() {
    var checked = $(this).is(':checked');
    resetTable(); // reset table in any case (checked or unchecked)
    if (checked) {
      spinnerEventHandler(spinner.spinner("value")); 
      $('input#highlight_unique').prop('checked', false);

      // link to phylotree and graphic
      resetPhyloTree();
      resetGraphic();
    }
  });

  // show intron phase
  $('input#show_intron_phase').change(function() {
    var checked = $(this).is(':checked');

    $intron_phase_table.toggle();
    $non_intron_phase_table.toggle();
  });

  // merged

  // Visible Spectrum
  var start = 450, // nm blue
    end = 780,   // nm red
    total = end - start;
  var wavelength, color;

  // color merged table
  var tMerged = $('table#merged')[0];
  var row = tMerged.rows[0];
  for (var i = 0, cell; cell = row.cells[i]; i++) {
    var nIntrons = cell.className;
    if (nIntrons == 0) {
      cell.setAttribute('style', 'background-color: #F5F5F5');
    } else {
      wavelength = (nIntrons * total) / n_rows_non_intron_phase + start;
      color = Math.nmToRGB(wavelength);
      cell.setAttribute('style', 'background-color: rgb(' +  color.red + ', ' + color.green + ', ' + color.blue + ')');
    }
  }

  // insert dummy cells to match scroll-bar of pattern-table
  cell = row.insertCell(-1);
  cell.innerHTML = "&nbsp;"; 

  cell = row.insertCell(-1);
  cell.innerHTML = "&nbsp;";

  // color bar  
  for (var i =0; i <= 100; i+=5) {
    wavelength = i/100 * total + start;
    color = Math.nmToRGB(wavelength);
    $("."+i+"pct")[0].setAttribute('style', 'background-color: rgb(' +  color.red + ', ' + color.green + ', ' + color.blue + ')');
  }

</script>
