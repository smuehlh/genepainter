hide_show_waiting('hide');

<% @new_genes.each do |gene| %>
  <% basename = gene.split('.').first%>

  // Count number of checks in view column first,
  // should be less than 20
  var count = _.filter($('input#view'), function(item) {
    return $(item).is(':checked');
  }).length;

  if (count < 20) {
    $(_.filter($('input#view'), function(item) {
      return $(item).attr('data') == '<%= basename %>';
    })[0]).removeAttr('disabled').prop('checked', true);
  }

  // Update gene status
  $('span#<%= basename %>').text('complete').css('color', 'green').css('font-weight', 'bold');
  $('span#<%= basename %>').parent().next().html('');
<% end %>

<% std_path = "#{Rails.root}/public/tmp/#{controller.id}-std.txt" %>
<% intron_phase_path = "#{Rails.root}/public/tmp/#{controller.id}-intron-phase.txt" %>

<% if FileTest.exists?(std_path) %>

  $('div#left-column').children().first().html("<%= get_sequence_names(std_path).html_safe %>");
  $('div#right-column').children().first().html("<%= get_table(std_path, 'non_intron_phase').html_safe %>");
  $('div#right-column').children().first().append("<%= get_table(intron_phase_path, 'intron_phase').html_safe %>");

  var $non_intron_phase_table = $('table#non_intron_phase'),
  $intron_phase_table = $('table#intron_phase');

  $intron_phase_table.toggle();

  // number of rows
  var n_rows = $non_intron_phase_table[0].rows.length;

  // number of columns
  var allCells = $non_intron_phase_table.find('td');
  var n_cols = allCells.length / n_rows;

  // traverse column by column
  function traverse(cells) {
    var intron_col_order = 0;

    for (var x = 0; x < n_cols; x++) {
      var n_introns = 0;

      for (var y = 0; y < n_rows; y++) {
        if (cells[n_cols*y + x].innerText != "-") {
          n_introns += 1;
        }
      }

      // class name based on number of introns in the column
      var class_name = "col-" + n_introns;

      for (var y = 0; y < n_rows; y++) {
        $(cells[n_cols*y + x]).addClass(class_name);
      }

      // set class names to interact with phylo tree
      if (n_introns > 0) {
        var class_name = "intron-col-" + intron_col_order;
        for (var y = 0; y < n_rows; y++) {
          $(cells[n_cols*y + x]).addClass(class_name);
        }

        intron_col_order += 1;
      }
    }
  }

  traverse(allCells);
  traverse($intron_phase_table.find('td'));

  // bind event to check boxes
  $('input#highlight_unique').change(function() {
    var checked = $(this).is(':checked');

    if (checked) {
      // reset
      $('.highlighted').removeClass('highlighted');

      $('td.col-1').addClass('highlighted');
      $('input#highlight_common').prop('checked', false);
    } else {
      $('td.col-1').removeClass('highlighted');
    }
  });

  $('input#highlight_common').change(function() {
    var checked = $(this).is(':checked');

    if (checked) {
      // reset
      $('.highlighted').removeClass('highlighted');

      $('input#highlight_unique').prop('checked', false);
    } else {

    }
  });

  // show intron phase
  $('input#show_intron_phase').change(function() {
    var checked = $(this).is(':checked');

    $intron_phase_table.toggle();
    $non_intron_phase_table.toggle();
  });

  // merged
  var tMerged = $('table#merged')[0];
  var row, cell;

  row = tMerged.insertRow(-1);

  // Visible Spectrum
  var start = 450, // nm blue
    end = 780,   // nm red
    total = end - start + 1;

  var wavelength, color;

  for (var i = 0; i < n_cols; i++) {
    cell = row.insertCell(-1);

    // set text of the cell based on number of introns in the column
    var nIntrons = parseInt(allCells[i].className.split(' ')[0].split('-')[1])

    //cell.setAttribute('class', allCells[i].className.split(' ')[0]);
    cell.innerText = nIntrons > 0 ? '|' : '-';

    if (nIntrons == 0) {
      cell.setAttribute('style', 'background-color: #F5F5F5');
    } else {
      wavelength = (nIntrons * total) / n_rows + start;
      color = Math.nmToRGB(wavelength);

      cell.setAttribute('style', 'background-color: rgb(' +  color.red + ', ' + color.green + ', ' + color.blue + ')');
    }
  }

  cell = row.insertCell(-1); // insert dummy cell
  cell.innerHTML = "&nbsp;";

  cell = row.insertCell(-1); // insert dummy cell
  cell.innerHTML = "&nbsp;";

  // Populate graphical tab
  <% convert_svg_to_pngs %>
  $('img#placeholder').prop('src', '<%= "/tmp/#{controller.id}-selected-normal.png" %>?timestamp=' + new Date().getTime());
  $('div#svg-merged').html('<%= render_svg("#{controller.id}-normal-merged.svg").delete!("\n").html_safe %>');

  $('input#standard').change(function() {
    var checkedOrNot = $(this).is(':checked');

    if (checkedOrNot) {
      $('img#placeholder').prop('src', '<%= "/tmp/#{controller.id}-selected-normal.png" %>?timestamp=' + new Date().getTime());
      $('div#svg-merged').html('<%= render_svg("#{controller.id}-normal-merged.svg").delete!("\n").html_safe %>');

      $('input#focus_on_common_introns').prop('checked', false);
    }
  });

  $('input#focus_on_common_introns').change(function() {
    var checkedOrNot = $(this).is(':checked');

    if (checkedOrNot) {
      $('img#placeholder').prop('src', '<%= "/tmp/#{controller.id}-selected-reduced.png" %>?timestamp=' + new Date().getTime());
      $('div#svg-merged').html('<%= render_svg("#{controller.id}-reduced-merged.svg").delete!("\n").html_safe %>');

      $('input#standard').prop('checked', false);
    }
  });

  if (_.filter($('input#view'), function(item) {
    return ! $(item).is(':disabled');
  }).length > 20) {
    $('div#select_genes').css('display', 'inline');
    $('div#placeholder').html('<%= populate_select_genes_modal.html_safe %>');
  }

  $('div#b_aligned_gene_structures').toggle('slow');
  $('p#t_aligned_gene_structures').toggle('slow');




  <% if File.exist?("#{Rails.root}/public/tmp/#{controller.id}-taxonomy-intron-numbers.txt") %>

    // Display phylotree
    $('p#t_phylotree').toggle('slow');
    $('div#b_phylotree').toggle('slow');

    $('div#svg_placeholder').html('<%= render_svg("#{controller.id}-tree.svg").delete!("\n").html_safe %>');

    var intron_numbers = $('<div/>').html('<%= intron_numbers %>').text();
    var obj = JSON.parse(intron_numbers.replace(/=>/g, ':'));

    function colorize(cells) {
      _.each(cells, function(cell) {
        $(cell).addClass('highlighted');
      });
    }

    function resetTable() {
      $('.highlighted').removeClass('highlighted');
    }

    function resetPhylotree() {
      $('.taxon').removeAttr('fill');
      $('.taxon').removeAttr('style');
    }


    $('.taxon').click(function() {

      resetPhylotree();
      resetTable();

      this.setAttribute('fill', 'blue');
      this.setAttribute('style', 'font-size: 14px; font-weight: bold');

      var textTokens = this.innerHTML.split(" ");

      if (textTokens.length > 1) {
        textTokens.pop();
        textTokens.pop();
        textTokens.pop();
      }

      var nodeName = textTokens.toString().replace(/,/g, " ");

      _.each(obj[nodeName], function(element) {
        colorize($("." + element));
      });



    });
  <% end %>

<% end %>
