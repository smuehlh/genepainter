<% 
	table_body = prepare_table_body(
		controller.sequence_names, 
		controller.genes_to_species_map, 
		controller.gene_structure_to_status_map
	) 

%>
<%=
	content_tag(:div, 
		content_tag(:span, "", 
			:class => "ui-icon ui-icon-closethick warning_close", 
			:style => "display:inline-block;",
			:onclick => "$('#generate_genestruct_warning').hide();"
		) +		
		content_tag(:normal,
			"Gene structures are generated on the fly using the WebScipio API. This will slow GenePainter down. Consider to use the webinterface of <a href='http://www.webscipio.org/' target='_blank' class='external'>WebScipio</a>, which is much faster than the API and offers plenty options.".html_safe,
		),
		:id => "generate_genestruct_warning",
		:class => "warning",
		:style => "display:none;"
	) +
	content_tag(:table, 
		content_tag(:thead, escape: false) do 
			content_tag(:tr) do 
				content_tag(:th, "Analyze", :class => "oce-checkbox-col" ) +
				content_tag(:th, "Gene names", :class => "oce-text-col") +
				content_tag(:th, "Gene structures", :class => "oce-text-col") +
				content_tag(:th, 
					"Generate gene structure".html_safe,
					:class => "oce-broad-checkbox-col"
				) +
				content_tag(:th, "Species", :class => "oce-species-col")
			end
		end,
		:class => "one-column-emphasis"
	) +
	form_tag(post_call_genepainter_path, remote: true, :id => "dataCenterForm") do
		content_tag(:div, 
			content_tag(:table,
				table_body,
				:class => "one-column-emphasis"
			),
		:class => "large_div"
		) + 
		content_tag(:p, 
			button_tag("Select All", 
				:type => "button", 
				:id => "toggle_analyse_all",
				:title => "Select all genes for analysis."
			) +
			button_tag("Deselect All",
				:type => "button",
				:id => "toggle_analyse_none",
				:title => "Deselect all genes for analysis."
			)
		) +
		hidden_field_tag(:is_example, false) +
		content_tag(:p,
			content_tag(:b, "Press submit when finished with data selection.") +
			image_tag("icons/help.png", :class => "help data_center_info")
		) +
		render( :partial => "gene_painter/help/data_center_info") +
		submit_tag("Submit", 
			:id => "data_center_button",
			:title => "Hit submit to start GenePainter.",
			:disabled => true,
			:onclick => "hide_show_waiting('show');"
		)
	end
%>

<script defer>

	// toggle help with image-click
	$("img.data_center_info").click(function() {
		 $("div#data_center_info").toggle("slow");
	});

	// enable submit button if gene structures are uploaded
	var is_genestruct_uploaded, is_generate_genestruct_selected;
	is_genestruct_uploaded = <%= (controller.sequence_names & controller.gene_structure_to_status_map.keys).any? %>
	if (is_genestruct_uploaded) {
		$("#data_center_button").prop("disabled", false);
		$("#data_center_info").hide();
	} else {
		$("#data_center_button").prop("disabled", true);
		$("#data_center_info").show("slow");
	};

	// onclick of analyse-checkboxes (select all/ deselect all)
	$(".analyse_checkbox").click(function() {
		// limit number of checked checkboxes
		restrict_num_checked_checkboxes(this, maxAllowedAnalyse, "analyse", "Select maximum " + maxAllowedAnalyse + " genes for analysis!"); 

		update_datacenter(this);
	});
	// # trigger('click') is neccessary to make jquery-click trigger events
	$("#toggle_analyse_all").click(function(){
		// warning: this is a hotfix that looks quite insane 
		// the goal: have each analyse-checkbox checked and the onclick-event triggered
		// the approach: 1) set checked to false (!!!), 2) trigger click event (sets checked to true again)

		// selecting only first _n_ visible checkboxes for analysis, display a warning if some are left over
		// visible checkboxes as there gene structure is uploaded or selected for generation!
		$('.analyse_checkbox:visible').prop('checked', false).slice(0,maxAllowedAnalyse).trigger('click');
		if ( $('.analyse_checkbox:visible').length > maxAllowedAnalyse ) {
			warning("Selected maximum "+maxAllowedAnalyse+ " genes for analysis!");
		}
	});
	$("#toggle_analyse_none").click(function() {
		// do not trigger onclick-event but trigger datacenter updates
		$('.analyse_checkbox').prop('checked', false);
		$('.analyse_checkbox').each(function(){ update_datacenter(this); });

		// $('.analyse_checkbox').prop('checked', true).trigger('click'); // triggers onclick-event (which potentially includes a warning, if too many checkboxes were temporarily! selected)
	});

	// onclick of generate-checkbox 
	$(".generate_checkbox").click(function() {
		// corresponding analyse-checkbox
		var analyseId = this.id.replace('_generate', '_analyse');
		// link status of checkbox to analyse-checkbox 
		if (this.checked) {
			$('#'+analyseId).show();
			$('#'+analyseId).prop('checked', false).trigger('click');
		} else {
			$('#'+analyseId).hide();
			$('#'+analyseId).prop('checked', true).trigger('click');
		}

		// enable submit button if gene structures are uploaded OR at least one should be generated
		nChecked = $("#dataCenterForm input[type=checkbox][name='generate_genestruct[]']:checked").length;

		is_generate_genestruct_selected = nChecked > 0
		if (is_genestruct_uploaded || is_generate_genestruct_selected )  {
			$("#data_center_button").prop("disabled", false);
			$("#data_center_info").hide();
		} else {
			$("#data_center_button").prop("disabled", true);
			$("#data_center_info").show("slow");
		}

		// limit number of checked generate-checkboxes
		restrict_num_checked_checkboxes(this, maxAllowedGenerate, "generate_genestruct", "Select maximum " + maxAllowedGenerate + " gene structures!"); 

		// display generate-genestruct warning if some checkboxes are checked, hide else
		if (nChecked > 0) {
			$('#generate_genestruct_warning').show();
		} else {
			$('#generate_genestruct_warning').hide();
		}
	});
</script>
